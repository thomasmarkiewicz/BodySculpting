#The name of your workflow.
name: Build
# Trigger the workflow on push or pull request
on:
  push:
    branches:
      - master
    tags:
      - v0.*
  pull_request:
    branches:
      - master
#A workflow run is made up of one or more jobs. Jobs run in parallel by default.
jobs:
  test:
    #The type of machine to run the job on. [windows,macos, ubuntu , self-hosted]
    runs-on: macos-latest
    #sequence of tasks called
    steps:
      # The branch or tag ref that triggered the workflow will be checked out.
      # https://github.com/actions/checkout
      - uses: actions/checkout@v1
      # Setup a flutter environment.
      # https://github.com/marketplace/actions/flutter-action
      - uses: subosito/flutter-action@v1
        with:
          #flutter-version: '1.12.14'
          channel: 'beta'
      - run: flutter pub get
      # run static analys code
      - run: flutter analyze
      # run  flutter widgets tests  and unit tests
      - run: flutter test --coverage
      # Upload coverage reports to Codecov
      # https://github.com/marketplace/actions/codecov
      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v1
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          file: coverage/lcov.info
      - run: echo ${{ github.ref }}

  drive_ios:
    #creates a build matrix for your jobs
    strategy:
      #set of different configurations of the virtual environment.
      matrix:
        device:
          - 'iPhone 8 (13.3)'
          - 'iPhone 11 Pro Max (13.3)'
      fail-fast: false
    runs-on: macos-latest
    #Identifies any jobs that must complete successfully before this job will run.
    needs: test
    steps:
      - name: List all simulators
        run: xcrun instruments -s
      # get UUID  simulator and boot a simulator on mac from  command line
      - name: Start Simulator
        run: |
          UDID=$(
            xcrun instruments -s |
            awk \
              -F ' *[][]' \
              -v 'device=${{ matrix.device }}' \
              '$1 == device { print $2 }'
          )
          xcrun simctl boot "${UDID:?No Simulator with this name found}"
      - uses: actions/checkout@v1
      - uses: subosito/flutter-action@v1
        with:
          #flutter-version: '1.12.14'
          channel: 'beta'
      # Run flutter integrate tests
      - name: Run Flutter Driver tests
        run: flutter drive --target=test_driver/app.dart

  drive_android:
    runs-on: macos-latest
    #creates a build matrix for your jobs
    strategy:
      #set of different configurations of the virtual environment.
      matrix:
        api-level: [21, 29]
        target: [default]
    needs: test
    steps:
      - uses: actions/checkout@v1
      - uses: subosito/flutter-action@v1
        with:
          #flutter-version: '1.12.14'
          channel: 'beta'
      - name: Run Flutter Driver tests
        #GitHub Action for installing, configuring and running Android Emulators (work only Mac OS)
        #https://github.com/ReactiveCircus/android-emulator-runner
        uses: reactivecircus/android-emulator-runner@v1
        with:
          api-level: ${{ matrix.api-level }}
          target: ${{ matrix.target }}
          arch: x86_64
          profile: Nexus 6
          script: flutter drive --target=test_driver/app.dart

  build_deploy:
    #if conditional to prevent a job from running unless github.ref
    #is a tag that starts with "v", as in "v0.0.1"
    #for a normal push to master, github.ref = "master"
    if: contains(github.ref, 'v0.')
    runs-on: macos-latest
    #Identifies any jobs that must complete successfully before this job will run.
    needs: [drive_ios, drive_android, test]
    name: Build apk
    steps:
      - uses: actions/checkout@v2
      - uses: subosito/flutter-action@v1
        with:
          #flutter-version: '1.12.14'
          channel: 'beta'
      # This action sets up a java environment
      # https://github.com/actions/setup-java
      - uses: actions/setup-java@v1
        with:
          java-version: '12.x'
      #enable linux,macos,windows   and  web
      - run: flutter  config --enable-web
      # - run: flutter  config --enable-linux-desktop
      # - run: flutter  config --enable-macos-desktop
      # - run: flutter  config --enable-windows-desktop
      - run: flutter pub get
      # build macOS desktop version
      # - run: flutter build macos --release
      # build Android version
      - run: flutter build apk --debug --split-per-abi
      # This action will create a github release and optionally upload an artifact to it.
      # https://github.com/ncipollo/release-action
      - name: Create a Release APK
        uses: ncipollo/release-action@v1
        with:
          artifacts: 'build/app/outputs/apk/debug/*.apk,build/macos/Build/Products/Release/*.app'
          token: ${{ secrets.GITHUB_TOKEN }}
      # build Flutter web version
      - run: flutter build web
      # Handle the deploy process of your project to GitHub Pages.
      # https://github.com/JamesIves/github-pages-deploy-action
      - uses: JamesIves/github-pages-deploy-action@releases/v3
        with:
          ACCESS_TOKEN: ${{ secrets.ACTIONS_TOKEN }}
          GITHUB_TOKE: ${{ secrets.GITHUB_TOKEN }}
          BASE_BRANCH: master
          BRANCH: gh-pages
          FOLDER: build/web
